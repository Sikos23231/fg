name: Build with vcpkg

on:
  push:
    branches:
      - master
      - v*

    paths:
      - cmake/**
      - src/**
      - CMakeLists.txt
      - CMakePresets.json
      - vcpkg.json

  pull_request:
    paths:
      - cmake/**
      - src/**
      - CMakeLists.txt
      - CMakePresets.json
      - vcpkg.json

jobs:
  build-vcpkg:
    name: ${{ matrix.name }}-${{ matrix.buildtype }}-luajit=${{ matrix.luajit }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        name: [ubuntu, ubuntu-clang, macos-clang, windows-msvc]
        buildtype: [Debug, Release]
        luajit: [on, off]
        include:
          - name: ubuntu
            os: ubuntu
          - name: ubuntu-clang
            os: ubuntu
          - name: macos-clang
            os: macos
          - name: windows-msvc
            os: windows
        exclude:
          - name: ubuntu-clang
            buildtype: Release
          - name: ubuntu-clang
            luajit: off
          - name: macos-clang
            luajit: off
          - name: windows-msvc
            luajit: off

    steps:
      - uses: actions/checkout@v3

      - name: Get latest CMake
        # Using 'latest' branch, the latest CMake is installed.
        uses: lukka/get-cmake@latest

      - name: Enable LuaJIT
        if: ${{ matrix.luajit }} == "on"
        run: echo "VCPKG_FEATURE_FLAGS=luajit" >> $GITHUB_ENV

      - name: Set clang as compiler
        if: ${{ endsWith(matrix.name, 'clang') }}
        run: |
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV

      - name: Run vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: 5b1214315250939257ef5d62ecdcbca18cf4fb1c

      - name: Build with CMake
        uses: lukka/run-cmake@v10
        with:
          buildPreset: ninja-vcpkg
          configurePreset: ninja-vcpkg

      - name: Upload artifact binary
        uses: actions/upload-artifact@v3
        if: ${{ !startsWith(matrix.os, 'windows') }}
        with:
          name: tfs-${{ matrix.name }}-${{ matrix.buildtype }}-luajit=${{ matrix.luajit }}-${{ github.sha }}
          path: ${{ runner.workspace }}/build/tfs

      - name: Upload artifact binary (exe)
        uses: actions/upload-artifact@v3
        if: ${{ startsWith(matrix.os, 'windows') }}
        with:
          name: tfs-${{ matrix.name }}-${{ matrix.buildtype }}-luajit=${{ matrix.luajit }}-${{ github.sha }}
          path: |
            ${{ runner.workspace }}/build/tfs.exe
            ${{ runner.workspace }}/build/*.dll

      - name: Prepare datapack contents
        run: find . -maxdepth 1 ! -name data ! -name config.lua.dist ! -name key.pem ! -name LICENSE ! -name README.md ! -name schema.sql -exec rm -r {} \;
        shell: bash

      - name: Upload datapack contents
        uses: actions/upload-artifact@v3
        with:
          name: tfs-${{ matrix.name }}-${{ matrix.buildtype }}-luajit=${{ matrix.luajit }}-${{ github.sha }}
          path: ${{ github.workspace }}
