name: Build with vcpkg

on:
  push:
    branches:
      - master
      - v*

    paths:
      - src/**
      - meson.build

  pull_request:
    paths:
      - src/**
      - meson.build

jobs:
  build-vcpkg:
    name: ${{ matrix.os }}-${{ matrix.cxx }}-${{ matrix.buildtype }}-luajit=${{ matrix.luajit }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix:
        name: [ubuntu-gcc, ubuntu-clang, macos-clang, windows-msvc]
        buildtype: [debug, release]
        luajit: [enabled, disabled]
        include:
          - name: ubuntu-gcc
            os: ubuntu
            cxx: g++
            cc: gcc
            triplet: x64-linux

          - name: ubuntu-clang
            os: ubuntu
            cxx: clang++
            cc: clang
            triplet: x64-linux

          - name: macos-clang
            os: macos
            cxx: clang++
            cc: clang
            triplet: x64-osx

          - name: windows-msvc
            os: windows
            cxx: cl.exe
            cc: cl.exe
            triplet: x64-windows

        exclude:
          - name: ubuntu-clang
            buildtype: release
          - name: ubuntu-clang
            luajit: disabled
          - name: macos-clang
            luajit: disabled

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - run: vcpkg install

      - name: Build with meson
        run: $VCPKG_INSTALLATION_ROOT/installed/${{ matrix.triplet }}/tools/meson/meson.py setup -D buildtype=${{ matrix.buildtype }} -D luajit=${{ matrix.luajit }} ${{ runner.workspace }}/build && ninja -C ${{ runner.workspace }}/build
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
          PATH: $VCPKG_INSTALLATION_ROOT/installed/${{ matrix.triplet }}/tools/ninja/:$VCPKG_INSTALLATION_ROOT/installed/${{ matrix.triplet }}/tools/python3/:$PATH
          BOOST_ROOT: $VCPKG_INSTALLATION_ROOT/installed/${{ matrix.triplet }}
          PKG_CONFIG_PATH: $VCPKG_INSTALLATION_ROOT/installed/${{ matrix.triplet }}/lib/pkgconfig

      - name: Upload artifact binary
        uses: actions/upload-artifact@v2
        with:
          name: tfs-${{ matrix.name }}-${{ matrix.buildtype }}-luajit=${{ matrix.luajit }}-${{ github.sha }}
          path: ${{ runner.workspace }}/build/tfs
        if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos')

      - name: Upload artifact binary (exe)
        uses: actions/upload-artifact@v2
        with:
          name: tfs-${{ matrix.name }}-${{ matrix.buildtype }}-luajit=${{ matrix.luajit }}-${{ github.sha }}
          path: ${{ runner.workspace }}/build/tfs.exe
        if: contains(matrix.os, 'windows')

      - name: Upload artifact binary (dlls)
        uses: actions/upload-artifact@v2
        with:
          name: tfs-${{ matrix.name }}-${{ matrix.buildtype }}-luajit=${{ matrix.luajit }}-${{ github.sha }}
          path: ${{ runner.workspace }}/build/*.dll
        if: contains(matrix.os, 'windows')

      - name: Prepare datapack contents
        run: find . -maxdepth 1 ! -name data ! -name config.lua.dist ! -name key.pem ! -name LICENSE ! -name README.md ! -name schema.sql -exec rm -r {} \;
        shell: bash

      - name: Upload datapack contents
        uses: actions/upload-artifact@v2
        with:
          name: tfs-${{ matrix.name }}-${{ matrix.buildtype }}-luajit=${{ matrix.luajit }}-${{ github.sha }}
          path: ${{ github.workspace }}
